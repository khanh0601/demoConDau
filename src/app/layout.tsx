import "./globals.css";
import { Inter, Roboto, Lora, Open_Sans, Poppins } from 'next/font/google';
import Script from 'next/script';

const inter = Inter({ subsets: ['latin'], variable: '--font-inter' });
const roboto = Roboto({ subsets: ['latin'], variable: '--font-roboto' });
const lora = Lora({ subsets: ['latin'], variable: '--font-lora' });
const openSans = Open_Sans({ subsets: ['latin'], variable: '--font-open-sans' });
const poppins = Poppins({ subsets: ['latin'], variable: '--font-poppins', weight: '400' });

export const metadata = {
  title: "Demo",
  description: "Generated by create-next-app",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto.variable} ${lora.variable} ${openSans.variable} ${poppins.variable}`}
    >
      <head>
        {/* Adobe Fonts (Typekit) Script */}
        <Script
          id="adobe-fonts"
          strategy="afterInteractive"
          dangerouslySetInnerHTML={{
            __html: `
              (function(d) {
                var config = {
                  kitId: 'xsz8dub',
                  scriptTimeout: 3000,
                  async: true
                },
                h=d.documentElement,t=setTimeout(function(){
                  h.className=h.className.replace(/\\bwf-loading\\b/g,"")+" wf-inactive";
                },config.scriptTimeout),
                tk=d.createElement("script"),
                f=false,
                s=d.getElementsByTagName("script")[0],
                a;h.className+=" wf-loading";
                tk.src='https://use.typekit.net/'+config.kitId+'.js';
                tk.async=true;
                tk.onload=tk.onreadystatechange=function(){
                  a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;
                  f=true;clearTimeout(t);
                  try{Typekit.load(config)}catch(e){}
                };
                s.parentNode.insertBefore(tk,s);
              })(document);
            `,
          }}
        />
      </head>
      <body>{children}</body>
    </html>
  );
}
